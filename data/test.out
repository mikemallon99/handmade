#include "handmade.h"

#include <math.h>


struct game_offscreen_buffer;


internal void
RenderWeirdGradient(game_offscreen_buffer *Buffer, int XOffset, int YOffset)
{
    uint8 *Row = (uint8 *)Buffer->Memory;

    for (int Y=0; Y < Buffer->Height; Y++) {
        uint32 *Pixel = (uint32 *)Row;
        for (int X=0; X < Buffer->Width; X++) {
            /*
             * Pixel in memory: 00 00 00 00
             * LITTLE ENDIAN ARCHITECTURE
             * LSB APPEARS AT THE END
             * 0x xxRRGGBB
             */

            uint8 Blue = (uint8)(X + XOffset);
            uint8 Green = (uint8)(Y + YOffset);
            uint8 Red = 0;
            uint8 Padding = 0;
            *Pixel++ = (Red << 16 | ((Green << 16) | Blue));
        }

        Row += Buffer->Pitch;
    }
}


internal void
RenderPlayer(game_offscreen_buffer *Buffer, int PlayerX, int PlayerY)
{
    uint32 Color = 0xFFFFFFFF;
    int Top = PlayerY;
    int Bottom = PlayerY+10;
    if ((Top < 0 || Bottom >= Buffer->Height) || (PlayerX < 0 || PlayerX+10 >= Buffer->Width))
    {
        return;
    }

    for (int X = PlayerX;
         X < PlayerX+10;
         X++)
    {
        uint8 *Pixel = ((uint8 *)Buffer->Memory + 
                        X*Buffer->BytesPerPixel + 
                        Top*Buffer->Pitch);
        for(int Y = Top;
            Y < Bottom;
            Y++)
        {
            *(uint32 *)Pixel = Color;
            Pixel += Buffer->Pitch;
        }
    }
}


internal void 
GameOutputSound(game_sound_output_buffer *SoundBuffer, game_state *GameState)
{
    int16 ToneVolume = 3000;
    int WavePeriod = (int)((real32)(SoundBuffer->SamplesPerSecond)/(real32)(GameState->ToneHz));

    int16 *SampleOut = SoundBuffer->Samples;
    for (int SampleIndex = 0;
         SampleIndex < SoundBuffer->SampleCount;
         SampleIndex++)
    {
        real32 SineValue = sinf(GameState->tSine);
#if 0
        int16 SampleValue = (int16)(SineValue * ToneVolume);
#else
        int16 SampleValue = 0;
#endif
        *SampleOut++ = SampleValue;
        *SampleOut++ = SampleValue;

        GameState->tSine += 2.0f * Pi32 * 1.0f / (real32)WavePeriod;
    }
}

extern "C" GAME_GET_SOUND_SAMPLES(GameGetSoundSamples)
{
    game_state *GameState = (game_state *)Memory->PermanentStorage;
    GameOutputSound(SoundBuffer, GameState);
}

extern "C" GAME_UPDATE_AND_RENDER(GameUpdateAndRender)
{
    Assert(sizeof(game_state) <= Memory->PermanentStorageSize);

    game_state *GameState = (game_state *)Memory->PermanentStorage;
    if (!Memory->IsInitialized)
    {
        char *Filename = __FILE__;

        debug_read_file_result File = Memory->DEBUGPlatformReadEntireFile(Thread, Filename);
        if (File.Contents)
        {
            Memory->DEBUGPlatformWriteEntireFile(Thread, "test.out", File.ContentsSize, File.Contents);
            Memory->DEBUGPlatformFreeFileMemory(Thread, File.Contents);
        }

        GameState->ToneHz = 256;

        GameState->PlayerX = 100;
        GameState->PlayerY = 100;

        // NOTE: 
        Memory->IsInitialized = true;
    }

    for (int ControllerIndex = 0;
         ControllerIndex < ArrayCount(Input->Controllers);
         ControllerIndex++)
    {
        game_controller_input *Controller = GetController(Input, ControllerIndex);
        if (Controller->IsAnalog)
        {
            // NOTE: Use analog movement tuning
            GameState->BlueOffset += (int)(4.0f*Controller->StickAverageX);
            GameState->ToneHz = 256 + (int)(128.0f*Controller->StickAverageY);
        }
        else
        {
            // NOTE: Use digital movement tuning
            if (Controller->MoveRight.EndedDown)
            {
                GameState->BlueOffset -= 1;
            }
            if (Controller->MoveLeft.EndedDown)
            {
                GameState->BlueOffset += 1;
            }
        }

        GameState->PlayerX += (int)(4.0f*Controller->StickAverageX);
        GameState->PlayerY -= (int)(4.0f*Controller->StickAverageY);
        if (Controller->ActionDown.EndedDown)
        {
            GameState->PlayerY -= 10;
        }
    }

    RenderWeirdGradient(Buffer, GameState->BlueOffset, GameState->GreenOffset);
    RenderPlayer(Buffer, GameState->PlayerX, GameState->PlayerY);

    RenderPlayer(Buffer, Input->MouseX, Input->MouseY);
    for (int MouseIndex = 0;
         MouseIndex < ArrayCount(Input->MouseButtons);
         MouseIndex++)
    {
        if (Input->MouseButtons[MouseIndex].EndedDown)
        {
            RenderPlayer(Buffer, 10 + 20*MouseIndex, 10);
        }
    }
}
